<!-- ************************************************************************************************************
******************Exercițiul 1 - comutator de culori
Scrieți un script care, după apăsarea butonului "Start", o dată pe secundă schimbă culoarea de fundal a lui <body> la o valoare aleatorie, folosind stilul inline. La click-ul butonului "Stop", schimbarea culorii de fundal se va opri.
ATENȚIE: Butonul "Start" poate fi apăsat de un număr infinit de ori. Faceți astfel încât, în timp ce schimbarea culorii de fundal este activată, butonul "Start" să fie dezactivat (disabled).
Puteți folosi funcția getRandomHexColor pentru a genera o culoare aleatorie.
function getRandomHexColor() {
  return `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, 0)}`;
}

************************************************************************************************************
**********************Exercițiul 2 - cronometru cu numărătoare inversă
Scrieți un script pentru un timer care numără invers până la o anumită dată. Un astfel de cronometru poate fi folosit în bloguri și magazine online, pagini de înregistrare pentru un eveniment, în timpul mentenanței unui produs etc. 
Folosiți librăria flatpickr pentru a permite utilizatorului să selecteze data și ora de încheiere, folosind doar un element al interfeței indiferent de tipul browser-ului. Pentru a conecta codul CSS al librăriei, adăugați încă un import față de cel menționat în documentație.
// Descris în documentație
import flatpickr from "flatpickr";
// Import suplimentar de stil
import "flatpickr/dist/flatpickr.min.css";

Librăria așteaptă să fie inițializată pe un element input[type="text"], așa că am adăugat un câmp input#datetime-picker în documentul HTML.
<input type="text" id="datetime-picker" />

Al doilea argument al funcției flatpickr(selector, options) poate fi un obiect opțional cu parametri. Am pregătit deja obiectul de care vei avea nevoie pentru a finaliza acest task. Încercați să înțelegeți ce face fiecare proprietate, citind documentația "Options". Utilizați-o apoi, în codul dvs.
const options = {
  enableTime: true,
  time_24hr: true,
  defaultDate: new Date(),
  minuteIncrement: 1,
  onClose(selectedDates) {
    console.log(selectedDates[0]);
  },
};

Selectarea datei
Metoda onClose() din obiectul cu parametri este apelată de fiecare dată când un element al interfeței creat de flatpickr este închis. Exact aici ar trebui procesată data selectată de către utilizator. Parametrul selectedDates este o matrice cu date selectate, deci luăm doar primul element.
•	Dacă utilizatorul a selectat o dată în trecut, afișați window.alert() cu textul "Please choose a date in the future".
•	Dacă utilizatorul a selectat o dată validă (în viitor), butonul "Start" devine activ.
•	Butonul "Start" trebuie dezactivat până când utilizatorul a selectat o dată în viitor.
•	Atunci când se dă click pe butonul "Start", se începe numărătoarea inversă până la data selectată.
Numărătoarea inversă
Când se dă click pe butonul "Start", scriptul va calcula o dată pe secundă cât timp a mai rămas până la data specificată și va actualiza interfața cronometrului, arătând patru cifre: zile, ore, minute și secunde în formatul xx:xx:xx:xx.
•	Numărul de zile poate fi format din două sau mai multe cifre.
•	Cronometrul ar trebui să se oprească atunci când ajunge la data de încheiere, adică 00:00:00:00.
SĂ NU NE COMPLICĂM
Dacă cronometrul rulează, pentru a selecta o nouă dată și a o reporni, trebuie reîncărcată pagina.
Pentru a calcula valorile, există funcția convertMs - unde ms este diferența în milisecunde dintre data de încheiere și data curentă.
function convertMs(ms) {
  // Number of milliseconds per unit of time
  const second = 1000;
  const minute = second * 60;
  const hour = minute * 60;
  const day = hour * 24;

  // Remaining days
  const days = Math.floor(ms / day);
  // Remaining hours
  const hours = Math.floor((ms % day) / hour);
  // Remaining minutes
  const minutes = Math.floor(((ms % day) % hour) / minute);
  // Remaining seconds
  const seconds = Math.floor((((ms % day) % hour) % minute) / second);

  return { days, hours, minutes, seconds };
}

console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}
console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}
console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}

Formatarea orei
Funcția convertMs() returnează un obiect cu timpul rămas până la data de încheiere. Aceasta nu formatează rezultatul. Adică, dacă au mai rămas 4 minute, atunci funcția va returna 4, nu 04. În interfața timer-ului, trebuie adăugat 0 dacă există mai puțin de două caractere într-un număr. Scrieți o funcție addLeadingZero(value) care va folosi metoda padStart() și formata valoarea înainte de a fi introdusă în interfață.
Librăria de notificări
ATENȚIE
Această funcționalitate nu este necesară la trimiterea acestui task, dar va fi un exercițiu suplimentar destul de bun.
Pentru a afișa notificări către utilizator, în loc de window.alert(), puteți folosi librăria notiflix.

************************************************************************************************************
*****************Exercițiul 3 - generator de promise-uri
Îndepliniți acest task în fișierele 03-promises.html și 03-promises.js. Urmăriți filmulețul demonstrativ al generatorului de promise-uri.
HTML-ul de mai jos conține un marcaj de formular în care utilizatorul va introduce prima întârziere în milisecunde, apoi pasul pentru creșterea întârzierii pentru fiecare promise și numărul de promise-uri care urmează a fi create.
<form class="form">
  <label>
    First delay (ms)
    <input type="number" name="delay" required />
  </label>
  <label>
    Delay step (ms)
    <input type="number" name="step" required />
  </label>
  <label>
    Amount
    <input type="number" name="amount" required />
  </label>
  <button type="submit">Create promises</button>
</form>

Scrieți un script care, atunci când se trimite un formular, apelează funcția createPromise(position, delay) de atâtea ori de câte este specificat în câmpul amount. La fiecare apel, transmiteți-i numărul promise-ului creat (position) și întârzierea ținând cont de primul (delay) introdus de utilizator și pasul (step).
function createPromise(position, delay) {
  const shouldResolve = Math.random() > 0.3;
  if (shouldResolve) {
    // Fulfill
  } else {
    // Reject
  }
}

Modificați codul funcției createPromise astfel încât să returneze un promise care va fi executat sau respins după un delay. Valoarea promise-ului trebuie să fie un obiect care conține proprietățile position și delay cu valorile parametrilor ce au același nume. Utilizați codul funcției inițiale pentru a alege ce vei face cu acel promise - fie executat sau respins.
createPromise(2, 1500)
  .then(({ position, delay }) => {
    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);
  })
  .catch(({ position, delay }) => {
    console.log(`❌ Rejected promise ${position} in ${delay}ms`);
  });

Librăria de notificări
ATENȚIE
Această funcționalitate nu este necesară la trimiterea acestui task, dar va fi un exercițiu suplimentar destul de bun.
Pentru a afișa notificări către utilizator, în loc de console.log(), puteți folosi librăria notiflix.
 -->
