{"mappings":"C,A,W,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,ACAA,gDAA+C;AAE/C,uEAAuE;A,I,E,E,SAGvE,wEAAwE;AACxE,0DAA0D;AAC1D,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,4DAA4D;AAC5D,IAAM,EAAO,SAAS,aAAa,CAAC,SACpC,EAAK,gBAAgB,CAAC,SAAU,SAAU,CAAK,EAC7C,EAAM,cAAc,EAEpB,yDAAwD;AACxD,sDAAsD;AACtD,IAAM,EAAQ,SAAS,EAAK,QAAQ,CAAC,KAAQ,CAAC,KAAK,CAAE,IAC/C,EAAO,SAAS,EAAK,QAAQ,CAAC,IAAO,CAAC,KAAK,CAAE,IAC7C,EAAS,SAAS,EAAK,QAAQ,CAAC,MAAS,CAAC,KAAK,CAAE,IAEvD,gDAAgD;AAChD,IAAK,IAAI,EAAI,EAAG,GAAK,EAAQ,IAAK,CAChC,IAAM,EAAW,EACX,EAAe,EAAS,AAAA,CAAA,EAAI,CAAA,EAAK,CAEvC,wEAAuE;AACvE,+DAA+D;AAC/D,uCAAuC;AAgB3C,6DAA6D;AAC7D,CAAA,SAAuB,CAAQ,CAAE,CAAK,EACpC,OAAO,IAAI,QAAQ,CAAC,EAAS,KAC3B,iFAAiF;AACjF,4GAA4G;AAC5G,IAAM,EAAgB,KAAK,MAAM,GAAK,GAEtC,WAAW,KACL,EACF,EAAQ,CAAE,SAAA,EAAU,MAAA,CAAM,GAE1B,EAAO,CAAE,SAAA,EAAU,MAAA,CAAM,EAE7B,EAAG,EACL,EACF,CAAA,EA9BkB,EAAU,GACrB,IAAI,CAAC,CAAC,CAAA,SAAE,CAAQ,CAAA,MAAE,CAAK,CAAE,IACxB,AAAA,WAAA,EAAA,EAAA,GAAS,MAAM,CAAC,OAAO,CACrB,CAAC,2BAAoB,EAAE,EAAS,IAAI,EAAE,EAAM,EAAE,CAAC,CAEnD,GACC,KAAK,CAAC,CAAC,CAAA,SAAE,CAAQ,CAAA,MAAE,CAAK,CAAE,IAEzB,AAAA,WAAA,EAAA,EAAA,GAAS,MAAM,CAAC,OAAO,CACrB,CAAC,0BAAmB,EAAE,EAAS,IAAI,EAAE,EAAM,EAAE,CAAC,CAElD,EACJ,CACF,EAkBF,E,G,kE","sources":["<anon>","src/js/03-promises.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire7bc7\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire7bc7\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n// Cerinta o regasesti in fisierul cerinte_teme\n// Notiflix este o librarie folosita pt funcționalitatile de notificare\n\nvar $6JpON = parcelRequire(\"6JpON\");\n// adaugare handler pt evenimentul DOMContentLoaded, care este declansat\n// cand documentul HTML a fost complet incarcat si parsat.\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // adaugare handler pt evenimentul \"submit\" al formularului.\n    const form = document.querySelector(\".form\");\n    form.addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n        // extragere valori introduse in campurile formularului:\n        // întârzierea(delay), pas(step) și cantitate(amount).\n        const delay = parseInt(form.elements[\"delay\"].value, 10);\n        const step = parseInt(form.elements[\"step\"].value, 10);\n        const amount = parseInt(form.elements[\"amount\"].value, 10);\n        // bucla for care rulează de la 1 până la amount\n        for(let i = 1; i <= amount; i++){\n            const position = i;\n            const currentDelay = delay + (i - 1) * step;\n            // pt fiecare promisiune, se adauga un handler then pentru rezolvare si\n            // un handler catch pentru respingere si se afișează notificari\n            // corespunzatoare cu ajutorul Notiflix\n            createPromise(position, currentDelay).then(({ position: position, delay: delay })=>{\n                (0, (/*@__PURE__*/$parcel$interopDefault($6JpON))).Notify.success(`\\u{2705} Fulfilled promise ${position} in ${delay}ms`);\n            }).catch(({ position: position, delay: delay })=>{\n                // Folosește direct Notiflix.Notify.Failure pentru tratarea eșecului\n                (0, (/*@__PURE__*/$parcel$interopDefault($6JpON))).Notify.failure(`\\u{274C} Rejected promise ${position} in ${delay}ms`);\n            });\n        }\n    });\n    // definire functie createPromise care intoarce o promisiune.\n    function createPromise(position, delay) {\n        return new Promise((resolve, reject)=>{\n            // se decide aleatoriu daca promisiunea  ar trebui sa fie rezolvata sau respinsa;\n            // promisiunea este rezolvata daca valoarea generata aleatoriu este mai mare decat 0.3, altfel este respinsă\n            const shouldResolve = Math.random() > 0.3;\n            setTimeout(()=>{\n                if (shouldResolve) resolve({\n                    position: position,\n                    delay: delay\n                });\n                else reject({\n                    position: position,\n                    delay: delay\n                });\n            }, delay);\n        });\n    }\n});\n\n})();\n//# sourceMappingURL=03-promises.5832083f.js.map\n","// Cerinta o regasesti in fisierul cerinte_teme\n\n// Notiflix este o librarie folosita pt funcționalitatile de notificare\nimport Notiflix from 'notiflix';\n\n// adaugare handler pt evenimentul DOMContentLoaded, care este declansat\n// cand documentul HTML a fost complet incarcat si parsat.\ndocument.addEventListener('DOMContentLoaded', function () {\n  // adaugare handler pt evenimentul \"submit\" al formularului.\n  const form = document.querySelector('.form');\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    // extragere valori introduse in campurile formularului:\n    // întârzierea(delay), pas(step) și cantitate(amount).\n    const delay = parseInt(form.elements['delay'].value, 10);\n    const step = parseInt(form.elements['step'].value, 10);\n    const amount = parseInt(form.elements['amount'].value, 10);\n\n    // bucla for care rulează de la 1 până la amount\n    for (let i = 1; i <= amount; i++) {\n      const position = i;\n      const currentDelay = delay + (i - 1) * step;\n\n      // pt fiecare promisiune, se adauga un handler then pentru rezolvare si\n      // un handler catch pentru respingere si se afișează notificari\n      // corespunzatoare cu ajutorul Notiflix\n      createPromise(position, currentDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          // Folosește direct Notiflix.Notify.Failure pentru tratarea eșecului\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  });\n\n  // definire functie createPromise care intoarce o promisiune.\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      // se decide aleatoriu daca promisiunea  ar trebui sa fie rezolvata sau respinsa;\n      // promisiunea este rezolvata daca valoarea generata aleatoriu este mai mare decat 0.3, altfel este respinsă\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n});\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$6JpON","document","addEventListener","form","querySelector","event","preventDefault","delay","parseInt","elements","value","step","amount","i","position","currentDelay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.5832083f.js.map"}